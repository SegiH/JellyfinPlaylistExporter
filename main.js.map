{"version":3,"sources":["./src/environments/environment.ts","./src/app/jellyfinplaylistexporter/jellyfinplaylistexporter.module.ts","./src/app/jellyfinplaylistexporter/jellyfinplaylistexporter.component.ts","./src/app/jellyfinplaylistexporter/jellyfinplaylistexporter.component.html","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACdnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AAEqB;AAElC;AACW;AACG;AACJ;AACW;AACF;AACP;AACE;AACK;AACH;AAE4B;;AAuBlF,MAAM,8BAA8B;;4GAA9B,8BAA8B;8GAA9B,8BAA8B,cAF7B,sGAAiC;mHADlC,EAAE,YAdJ;YACP,uEAAa;YACb,4FAAuB;YACvB,0DAAW;YACX,qEAAgB;YAChB,wEAAe;YACf,oEAAa;YACb,+EAAkB;YAClB,6EAAiB;YACjB,sEAAc;YACd,wEAAe;YACf,8EAAiB;YACjB,2EAAgB;SACjB;oIAIU,8BAA8B,mBAnBvC,sGAAiC,aAGjC,uEAAa;QACb,4FAAuB;QACvB,0DAAW;QACX,qEAAgB;QAChB,wEAAe;QACf,oEAAa;QACb,+EAAkB;QAClB,6EAAiB;QACjB,sEAAc;QACd,wEAAe;QACf,8EAAiB;QACjB,2EAAgB;;;;;;;;;;;;;ACjCpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmC;AAEJ;AACS;AAGqC;;;;;;;;;;;;;;;ICyBnE,mFAAkE;IAC7D,2EAA6B;IAAA,0EAAe;IAAA,4DAAO;IACxD,4DAAgB;;;IAIN,iFAA8E;IACxE,uDACN;IAAA,4DAAa;;;IAFwC,oFAAwB;IACvE,0DACN;IADM,+FACN;;;;IAJV,mFAAkE;IAC7D,iFAAyH;IAA5C,qXAA2B;IACnG,6JAEa;IACjB,4DAAa;IACnB,4DAAgB;;;IALkE,0DAA2B;IAA3B,yFAA2B;IAC/D,0DAAe;IAAf,wFAAe;;;;IAOxD,6EAA+H;IAA1B,8UAAyB;IAAC,yEAAc;IAAA,4DAAS;;;IAKjJ,6EAA2E;IACtE,uDACL;IAAA,4DAAS;;;IAFsC,iGAA2B;IACrE,0DACL;IADK,iGACL;;;IAJV,oFAAsF;IACjF,6EAAgD;IAC3C,qJAES;IACd,4DAAS;IACd,4DAAgB;;;IAJ2B,0DAAY;IAAZ,qFAAY;;;;IAOlD,6EAAsH;IAA5B,kVAA2B;IAAC,iEAAM;IAAA,4DAAS;;AD1C7I,MAAM,iCAAiC;IASzC,YAAoB,QAAqB,EAAU,IAAgB;QAA/C,aAAQ,GAAR,QAAQ,CAAa;QAAU,SAAI,GAAJ,IAAI,CAAY;QARnE,WAAM,GAAW,EAAE,CAAC;QACpB,kBAAa,GAAW,EAAE,CAAC;QAC3B,cAAS,GAAU,EAAE,CAAC;QACtB,oBAAe,GAAG,KAAK,CAAC;QACxB,QAAG,GAAW,EAAE,CAAC;QAEjB,uBAAkB,GAAG,KAAK,CAAC;IAE4C,CAAC;IAExE,QAAQ;QACH,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAED,eAAe;QACV,MAAM,gBAAgB,GAAC,MAAM,CAAC;QAC9B,MAAM,IAAI,GAAG,eAAe,CAAC;QAC7B,MAAM,GAAG,GAAG,IAAI,kCAAK,EAAE,CAAC;QAExB,IAAI,UAAU,GAAC,QAAQ,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;QAErD,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,IAAI,OAAO,GAAG,UAAU,IAAI,UAAU,CAAC,SAAS,CAAC,CAAC;QAClD,IAAI,GAAG,CAAC;QAER,2BAA2B;QAC3B,KAAK,IAAI,CAAC,GAAC,CAAC,EAAE,IAAI,GAAC,OAAO,CAAC,MAAM,EAAE,CAAC,GAAC,IAAI,EAAE,CAAC,EAAE,EAAE;YAC3C,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;YAEjB,IAAI,GAAG,CAAC,QAAQ;gBACX,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;SAC5C;QAED,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;YACpB,IAAI,CAAC,mBAAmB,CAAC,mCAAmC,CAAC,CAAC;YAC9D,OAAO;SACX;QAED,6BAA6B;QAC7B,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE;YAC5B,qCAAqC;YACrC,MAAM,mBAAmB,GAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC,YAAY,CAAC,MAAM,CAAC,IAAE,eAAe,CAAC,CAAC;YAEvG,IAAI,QAAQ,GAAC,UAAU,gBAAgB,mBAAmB,mBAAmB,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,gBAAgB,EAAE;YAE1G,mBAAmB,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;gBAC5D,MAAM,QAAQ,GAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,GAAC,SAAS,CAAC,CAAC;gBAE/E,QAAQ,IAAE,WAAW,aAAa,CAAC,OAAO,CAAC,GAAG,gBAAgB,WAAW,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,gBAAgB,WAAW,QAAQ,IAAI,aAAa,CAAC,MAAM,CAAC,GAAG,gBAAgB,GAAG,aAAa,CAAC,MAAM,CAAC,GAAG,gBAAgB,EAAE;YACxO,CAAC,CAAC,CAAC;YAEH,6BAA6B;YAC7B,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC,CAAC;YAC1D,GAAG,CAAC,IAAI,CAAC,GAAG,mBAAmB,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE,IAAI,CAAC,CAAC;YAErD,sDAAsD;QAC3D,CAAC,CAAC,CAAC;QAEH,iCAAiC;QACjC,GAAG,CAAC,aAAa,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;YAChD,IAAI,OAAO;gBACN,iDAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;IACR,CAAC;IAED,aAAa;QACR,MAAM,MAAM,GAAC,GAAG,IAAI,CAAC,GAAG,SAAS,IAAI,CAAC,aAAa,uEAAuE,IAAI,CAAC,MAAM,EAAE,CAAC;QAExI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAM,MAAM,CAAC,CAAC,SAAS,CAAC,CAAC,SAAgB,EAAE,EAAE;YACrD,IAAI,CAAC,SAAS,GAAC,EAAE,CAAC;YAElB,6BAA6B;YAC7B,SAAS,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;gBACrC,qBAAqB;gBACrB,MAAM,WAAW,GAAC,GAAG,IAAI,CAAC,GAAG,aAAa,YAAY,CAAC,EAAE,6BAA6B,IAAI,CAAC,aAAa,YAAY,IAAI,CAAC,MAAM,EAAE,CAAC;gBAElI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAM,WAAW,CAAC,CAAC,SAAS,CAAC,CAAC,iBAAwB,EAAE,EAAE;oBAClE,4CAA4C;oBAC5C,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAC,MAAM,EAAE,YAAY,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,YAAY,CAAC,IAAI,CAAC,EAAE,gBAAgB,EAAE,iBAAiB,CAAC,OAAO,CAAC,EAAC,CAAC,CAAC;oBAE5H,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,EAAE;wBACvC,OAAO,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;oBACzC,CAAC,CAAC,CAAC;gBACR,CAAC,EACD,KAAK,CAAC,EAAE;oBACJ,wDAAU,CAAC,8CAA8C,CAAC,CAAC;gBAC/D,CAAC,CAAC,CAAC;YACR,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,eAAe,GAAC,IAAI,CAAC;QAChC,CAAC,EACD,KAAK,CAAC,EAAE;YACJ,wDAAU,CAAC,yCAAyC,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;IACP,CAAC;IAED,gBAAgB;QACX,IAAI,IAAI,CAAC,GAAG,KAAK,IAAI,IAAI,IAAI,CAAC,GAAG,KAAK,EAAE,EAAE;YACrC,IAAI,CAAC,mBAAmB,CAAC,iEAAiE,CAAC,CAAC;YAC5F,OAAO;SACX;QAED,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,EAAE,EAAE;YAC9C,IAAI,CAAC,mBAAmB,CAAC,uEAAuE,CAAC,CAAC;YAClG,OAAO;SACR;QAED,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG;YACxB,IAAI,CAAC,GAAG,IAAE,GAAG,CAAC;QAEnB,MAAM,MAAM,GAAC,GAAG,IAAI,CAAC,GAAG,6BAA6B,IAAI,CAAC,MAAM,EAAE;QAElE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAM,MAAM,CAAC,CAAC,SAAS,CAAC,CAAC,YAAmB,EAAE,EAAE;YACxD,IAAI,CAAC,YAAY,GAAC,YAAY,CAAC;YAE/B,IAAI,CAAC,kBAAkB,GAAC,IAAI,CAAC;QAClC,CAAC,EACD,KAAK,CAAC,EAAE;YACH,wDAAU,CAAC,6CAA6C,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;IACR,CAAC;IAED,mBAAmB,CAAC,OAAe;QAC/B,MAAM,MAAM,GAAG,IAAI,6EAAiB,EAAE,CAAC;QACvC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;IAC9C,CAAC;;kHA/HO,iCAAiC;iHAAjC,iCAAiC;QCf9C,iFAA6B;QACzB,uEAAM;QAAA,qFAA0B;QAAA,4DAAO;QAC3C,4DAAc;QAEd,2EAAU;QACL,mFAAyC;QACpC,mFAAuC;QAClC,0EAAkB;QAAA,yEAAc;QAAA,4DAAO;QAC5C,4DAAgB;QAEhB,mFAAuC;QAClC,oFAA8B;QACzB,4EAAiD;QAAlB,mMAAiB;QAAhD,4DAAiD;QACtD,4DAAiB;QACtB,4DAAgB;QAEhB,oFAAuC;QAClC,6EAAyG;QAA7B,0JAAS,sBAAkB,IAAC;QAAC,8EAAkB;QAAA,4DAAS;QACzI,4DAAgB;QAEhB,oFAAuC;QAClC,2EAAuB;QAAA,qEAAS;QAAA,4DAAO;QAC5C,4DAAgB;QAEhB,oFAAuC;QAClC,qFAAiC;QAC5B,4EAAoD;QAArB,sMAAoB;QAAnD,4DAAoD;QACzD,4DAAiB;QACtB,4DAAgB;QAEhB,+EAAuD;QAEvD,mJAEgB;QAEhB,mJAMgB;QAEhB,oFAAuC;QAClC,sIAAsJ;QAC3J,4DAAgB;QAEhB,oJAMgB;QAEhB,qFAAuC;QAClC,sIAAqI;QAC1I,4DAAgB;QAGrB,4DAAgB;QACrB,4DAAW;;QAlDwC,2DAAiB;QAAjB,4EAAiB;QAcjB,0DAAoB;QAApB,+EAAoB;QAM7C,0DAAwB;QAAxB,wFAAwB;QAIxB,0DAAwB;QAAxB,wFAAwB;QASJ,0DAAyB;QAAzB,yFAAyB;QAGtB,0DAAqB;QAArB,qFAAqB;QAS/B,0DAAqB;QAArB,qFAAqB;;;;;;;;;;;;;;;;;;;;ACzDb;AAGiE;AACvD;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,CAAC,eAAe,CAAC,4HAA8B,CAAC;KACrE,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;;;;;;;;;;;;ACXpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,qC","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatToolbarModule } from '@angular/material/toolbar';\n\nimport { JellyfinPlaylistExporterComponent } from './jellyfinplaylistexporter.component';\n\n@NgModule({\n  declarations: [\n    JellyfinPlaylistExporterComponent,\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    HttpClientModule,\n    MatButtonModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatGridListModule,\n    MatInputModule,\n    MatSelectModule,\n    MatSnackBarModule,\n    MatToolbarModule,\n  ],\n  providers: [],\n  bootstrap: [JellyfinPlaylistExporterComponent]\n})\nexport class JellyfinPlaylistExporterModule { }\n","import { Component, OnInit  } from '@angular/core';\nimport { throwError } from 'rxjs/';\n\nimport * as JSZip from 'jszip';\nimport * as FileSaver from 'file-saver';  \n\nimport { HttpClient } from '@angular/common/http';\nimport { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './jellyfinplaylistexporter.component.html',\n  styleUrls: ['./jellyfinplaylistexporter.component.css']\n})\n\nexport class JellyfinPlaylistExporterComponent implements OnInit {\n     APIKey: string = \"\";\n     currentUserID: string = '';\n     playlists: any[] = [];\n     playlistsLoaded = false;\n     URL: string = \"\";\n     userAccounts: string[];\n     userAccountsLoaded = false;\n     \n     constructor(private snackBar: MatSnackBar, private http: HttpClient) { }\n\n     ngOnInit() {\n          this.loadPlaylists.bind(this);\n     }\n\n     exportPlaylists() { \n          const newlineDelimeter=`\\r\\n`;\n          const name = 'playlists.zip';\n          const zip = new JSZip();\n\n          var plstSelect=document.getElementById(\"plstSelect\");\n\n          var result = [];\n          var options = plstSelect && plstSelect['options'];\n          var opt;\n\n          // Get all select playlists\n          for (var i=0, iLen=options.length; i<iLen; i++) {\n               opt = options[i];\n\n               if (opt.selected)\n                    result.push(opt.value || opt.text);\n          }\n          \n          if (result.length === 0) {\n               this.showSnackBarMessage(\"Please select at least 1 playlist\");\n               return;\n          }\n\n          // Loop through each playlist\n          result.forEach(currentPlaylist => {\n               // Currently selected playlist object\n               const currentPlaylistItem=this.playlists.filter(playlistItem => playlistItem['Name']==currentPlaylist);\n               \n               let fileData=`#EXTM3U${newlineDelimeter}#Playlist name: ${currentPlaylistItem[0].Name}${newlineDelimeter}`\n                              \n               currentPlaylistItem[0]['PlaylistTracks'].forEach(playlistTrack => {\n                    const duration=Math.round(parseFloat(playlistTrack['RunTimeTicks'])*0.0000001);\n\n                    fileData+=`#EXTALB:${playlistTrack['Album']}${newlineDelimeter}#EXTART:${playlistTrack['Artists'][0]}${newlineDelimeter}#EXTINF:${duration},${playlistTrack['Name']}${newlineDelimeter}${playlistTrack['Path']}${newlineDelimeter}`\n               });\n               \n               // Create blob and add to zip\n               const blob = new Blob([fileData], { type: 'text/plain' });\n               zip.file(`${currentPlaylistItem[0].Name}.txt`, blob);               \n               \n               //saveAs(blob, `${currentPlaylistItem[0].Name}.txt`); \n          });\n\n          // Serve the zip file using async\n          zip.generateAsync({ type: 'blob' }).then((content) => {  \n               if (content)\n                    FileSaver.saveAs(content, name);\n          });  \n     }\n\n     loadPlaylists() {\n          const APIURL=`${this.URL}Users/${this.currentUserID}/Items?format=json&Recursive=true&IncludeItemTypes=Playlist&api_key=${this.APIKey}`;\n\n          this.http.get<any>(APIURL).subscribe((playlists: any[]) => {\n               this.playlists=[];\n               \n               // Loop through each playlist\n               playlists['Items'].forEach(playlistItem => {\n                    // Get playlist items\n                    const playlistAPI=`${this.URL}Playlists/${playlistItem.Id}/Items?Fields=Path&userId=${this.currentUserID}&api_key=${this.APIKey}`;\n                    \n                    this.http.get<any>(playlistAPI).subscribe((playlistItemsData: any[]) => {\n                         // Add playlist name, ID and playlist tracks\n                         this.playlists.push({'Name': playlistItem['Name'], 'ID': playlistItem['Id'], 'PlaylistTracks': playlistItemsData['Items']});\n\n                         this.playlists = this.playlists.sort((a,b)=>{\n                              return a.Name.localeCompare(b.Name);\n                         });\n                    },\n                    error => {\n                        throwError(\"An error occurred getting the playlist items\");\n                    });\n               });\n\n               this.playlistsLoaded=true;\n         },\n         error => {\n             throwError(\"An error occurred getting the playlists\");\n         });\n     }\n\n     loadUserAccounts() {\n          if (this.URL === null || this.URL === \"\") {\n               this.showSnackBarMessage(\"Please enter the URL of your instance of Jellyfin/Emby instance\");\n               return;\n          }\n\n          if (this.APIKey === null || this.APIKey === \"\") {\n            this.showSnackBarMessage(\"Please enter the API Key from your instance of Jellyfin/Emby instance\");\n            return;\n          }\n\n          if (this.URL.slice(-1) != '/')\n               this.URL+='/';\n\n          const APIURL=`${this.URL}Users?format=json&api_key=${this.APIKey}`\n\n          this.http.get<any>(APIURL).subscribe((userAccounts: any[]) => {  \n               this.userAccounts=userAccounts;\n\n               this.userAccountsLoaded=true;\n          },\n          error => {\n               throwError(\"An error occurred getting the grocery items\");\n          });\n     }\n\n     showSnackBarMessage(message: string) {\n         const config = new MatSnackBarConfig();\n         config.duration = 3000;\n         this.snackBar.open(message, 'OK', config);\n     }\n}","<mat-toolbar color=\"primary\">\n    <span>Jellyfin Playlist Explorer</span>\n</mat-toolbar>\n\n<mat-card>\n     <mat-grid-list cols=\"3\" rowHeight=\"60px\">\n          <mat-grid-tile colspan=\"1\" rowspan=\"1\">\n               <span id=\"lblURL\">Jellyfin URL: </span>      \n          </mat-grid-tile>\n\n          <mat-grid-tile colspan=\"1\" rowspan=\"1\">\n               <mat-form-field id=\"URLField\">\n                    <input matInput placeholder='' [(ngModel)]=\"URL\">\n               </mat-form-field>\n          </mat-grid-tile>\n\n          <mat-grid-tile colspan=\"1\" rowspan=\"1\">\n               <button id=\"lblLoadUserAccounts\" matInput mat-raised-button color=\"primary\" (click)=\"loadUserAccounts()\">Load User Accounts</button>\n          </mat-grid-tile>\n\n          <mat-grid-tile colspan=\"1\" rowspan=\"1\">\n               <span id=\"APIKeyLabel\">API Key: </span>      \n          </mat-grid-tile>\n\n          <mat-grid-tile colspan=\"1\" rowspan=\"1\">\n               <mat-form-field id=\"APIKeyField\">\n                    <input matInput placeholder='' [(ngModel)]=\"APIKey\">\n               </mat-form-field>\n          </mat-grid-tile>\n\n          <mat-grid-tile colspan=\"1\" rowspan=\"1\"></mat-grid-tile>\n\n          <mat-grid-tile *ngIf=\"userAccountsLoaded\" colspan=\"1\" rowspan=\"1\">\n               <span id=\"userAccountsLabel\">User Accounts: </span>      \n          </mat-grid-tile>\n\n          <mat-grid-tile *ngIf=\"userAccountsLoaded\" colspan=\"1\" rowspan=\"1\">\n               <mat-select id=\"userAccounts\" placeholder='User Accounts' name=\"useraccount\" [(ngModel)]=\"currentUserID\" [required]=true>\n                    <mat-option *ngFor=\"let currAccount of userAccounts\" [value]=\"currAccount.Id\">\n                          {{ currAccount.Name }}\n                    </mat-option>\n                </mat-select>\n          </mat-grid-tile>          \n\n          <mat-grid-tile colspan=\"1\" rowspan=\"1\">\n               <button id=\"btnLoadPlaylists\" *ngIf=\"currentUserID != ''\" matInput mat-raised-button color=\"primary\" (click)=\"loadPlaylists()\">Load Playlists</button>\n          </mat-grid-tile>          \n\n          <mat-grid-tile id=\"playlistsGridTile\" *ngIf=\"playlistsLoaded\" colspan=\"1\" rowspan=\"1\">\n               <select multiple ng-model=\"xss\" id=\"plstSelect\">\n                    <option *ngFor=\"let currPlaylist of playlists\" value=\"{{currPlaylist.Id}}\">\n                         {{ currPlaylist.Name }}\n                    </option>\n               </select>\n          </mat-grid-tile>\n\n          <mat-grid-tile colspan=\"1\" rowspan=\"2\">\n               <button id=\"btnExport\" *ngIf=\"playlistsLoaded\" matInput mat-raised-button color=\"primary\" (click)=\"exportPlaylists()\">Export</button>\n          </mat-grid-tile>\n\n          \n     </mat-grid-list>\n</mat-card>","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { JellyfinPlaylistExporterModule } from './app/jellyfinplaylistexporter/jellyfinplaylistexporter.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(JellyfinPlaylistExporterModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}