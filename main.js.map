{"version":3,"sources":["./src/environments/environment.ts","./src/app/jellyfinplaylistexporter/jellyfinplaylistexporter.module.ts","./src/app/jellyfinplaylistexporter/jellyfinplaylistexporter.component.ts","./src/app/jellyfinplaylistexporter/jellyfinplaylistexporter.component.html","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\n\r\nimport { JellyfinPlaylistExporterComponent } from './jellyfinplaylistexporter.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    JellyfinPlaylistExporterComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatFormFieldModule,\r\n    MatGridListModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatSnackBarModule,\r\n    MatToolbarModule,\r\n  ],\r\n  providers: [],\r\n  bootstrap: [JellyfinPlaylistExporterComponent]\r\n})\r\nexport class JellyfinPlaylistExporterModule { }\r\n","import { Component, OnInit  } from '@angular/core';\r\nimport { throwError } from 'rxjs/';\r\n\r\nimport * as JSZip from 'jszip';\r\nimport * as FileSaver from 'file-saver';  \r\n\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './jellyfinplaylistexporter.component.html',\r\n  styleUrls: ['./jellyfinplaylistexporter.component.css']\r\n})\r\n\r\nexport class JellyfinPlaylistExporterComponent implements OnInit {\r\n     APIKey: string = \"\";\r\n     currentUserID: string = '';\r\n     demoMode = true;\r\n     playlists: any[] = [];\r\n     playlistsLoaded = false;\r\n     selectAllNone = false;\r\n     URL: string = \"\";\r\n     userAccounts: string[];     \r\n     userAccountsLoaded = false;\r\n     \r\n     constructor(private snackBar: MatSnackBar, private http: HttpClient) { }\r\n\r\n     ngOnInit() {\r\n          this.loadPlaylists.bind(this);\r\n\r\n          if (this.demoMode) {\r\n               this.URL = `https://media.domain.com`;\r\n               this.APIKey = `YOURAPIKEY`;               \r\n               this.currentUserID = 'abceasyas123abcde123456789';\r\n               this.userAccounts=JSON.parse(`[{\"Name\":\"Some User\",\"Id\":\"abceasyas123abcde123456789\"},{\"Name\":\"Some Other User\",\"Id\":\"fedcbasyas123abcde123456789\"}]`);\r\n               this.playlistsLoaded = true;\r\n               this.userAccountsLoaded = true;\r\n\r\n               this.playlists=[];\r\n               \r\n               this.playlists.push({'Name': 'Classic Rock', 'ID': 1, 'PlaylistTracks': []});\r\n               this.playlists.push({'Name': 'Alternative', 'ID': 2, 'PlaylistTracks': []});\r\n               this.playlists.push({'Name': 'Jazz', 'ID': 3, 'PlaylistTracks': []});\r\n               this.playlists.push({'Name': 'Rush', 'ID': 4, 'PlaylistTracks': []});\r\n          }\r\n     }\r\n\r\n     exportPlaylists() { \r\n          const newlineDelimeter=`\\r\\n`;\r\n          const name = 'playlists.zip';\r\n          const zip = new JSZip();\r\n\r\n          var plstSelect=document.getElementById(\"plstSelect\");\r\n\r\n          var result = [];\r\n          var options = plstSelect && plstSelect['options'];\r\n          var opt;\r\n\r\n          // Get all selected playlists\r\n          for (var i=0, iLen=options.length; i<iLen; i++) {\r\n               opt = options[i];\r\n\r\n               if (opt.selected)\r\n                    result.push(opt.value || opt.text);\r\n          }\r\n          \r\n          if (result.length === 0) {\r\n               this.showSnackBarMessage(\"Please select at least 1 playlist\");\r\n               return;\r\n          }\r\n\r\n          // Loop through each playlist\r\n          result.forEach(currentPlaylist => {\r\n               // Currently selected playlist object\r\n               const currentPlaylistItem=this.playlists.filter(playlistItem => playlistItem['Name']==currentPlaylist);\r\n               \r\n               let fileData=`#EXTM3U${newlineDelimeter}#Playlist name: ${currentPlaylistItem[0].Name}${newlineDelimeter}`\r\n                              \r\n               currentPlaylistItem[0]['PlaylistTracks'].forEach(playlistTrack => {\r\n                    const duration=Math.round(parseFloat(playlistTrack['RunTimeTicks'])*0.0000001);\r\n\r\n                    fileData+=`#EXTALB:${playlistTrack['Album']}${newlineDelimeter}#EXTART:${playlistTrack['Artists'][0]}${newlineDelimeter}#EXTINF:${duration},${playlistTrack['Name']}${newlineDelimeter}${playlistTrack['Path']}${newlineDelimeter}`\r\n               });\r\n               \r\n               // Create blob and add to zip\r\n               const blob = new Blob([fileData], { type: 'text/plain' });\r\n               zip.file(`${currentPlaylistItem[0].Name}.m3u8`, blob);               \r\n               \r\n               //saveAs(blob, `${currentPlaylistItem[0].Name}.txt`); \r\n          });\r\n\r\n          // Serve the zip file using async\r\n          zip.generateAsync({ type: 'blob' }).then((content) => {  \r\n               if (content)\r\n                    FileSaver.saveAs(content, name);\r\n          });  \r\n     }\r\n\r\n     loadPlaylists() {\r\n          //const APIURL=`${this.URL}Users/${this.currentUserID}/Items?format=json&Recursive=true&IncludeItemTypes=Playlist&api_key=${this.APIKey}`;\r\n          const APIURL=`${this.URL}Users/${this.currentUserID}/Items`;\r\n\r\n          let params = new HttpParams();\r\n          params = params.append('format','json');\r\n          params = params.append('Recursive','true');\r\n          params = params.append('IncludeItemTypes','Playlist');\r\n          params = params.append('api_key',this.APIKey);\r\n\r\n          this.http.get<any>(APIURL,{params: params}).subscribe((playlists: any[]) => {\r\n               this.playlists=[];\r\n               \r\n               // Loop through each playlist\r\n               playlists['Items'].forEach(playlistItem => {\r\n                    // Get playlist items\r\n                    const playlistAPI=`${this.URL}Playlists/${playlistItem.Id}/Items?Fields=Path&userId=${this.currentUserID}&api_key=${this.APIKey}`;\r\n                    \r\n                    this.http.get<any>(playlistAPI).subscribe((playlistItemsData: any[]) => {\r\n                         // Add playlist name, ID and playlist tracks\r\n                         this.playlists.push({'Name': playlistItem['Name'], 'ID': playlistItem['Id'], 'PlaylistTracks': playlistItemsData['Items']});\r\n\r\n                         this.playlists = this.playlists.sort((a,b)=>{\r\n                              return a.Name.localeCompare(b.Name);\r\n                         });\r\n                    },\r\n                    error => {\r\n                        throwError(\"An error occurred getting the playlist items\");\r\n                    });\r\n               });\r\n\r\n               this.playlistsLoaded=true;\r\n         },\r\n         error => {\r\n             throwError(\"An error occurred getting the playlists\");\r\n         });\r\n     }\r\n\r\n     loadUserAccounts() {\r\n          if (this.URL === null || this.URL === \"\") {\r\n               this.showSnackBarMessage(\"Please enter the URL of your instance of Jellyfin/Emby instance\");\r\n               return;\r\n          }\r\n\r\n          if (this.APIKey === null || this.APIKey === \"\") {\r\n            this.showSnackBarMessage(\"Please enter the API Key from your instance of Jellyfin/Emby instance\");\r\n            return;\r\n          }\r\n\r\n          if (this.URL.slice(-1) != '/')\r\n               this.URL+='/';\r\n\r\n          const APIURL=`${this.URL}Users?format=json&api_key=${this.APIKey}`\r\n\r\n          this.http.get<any>(APIURL).subscribe((userAccounts: any[]) => {  \r\n               this.userAccounts=userAccounts;\r\n\r\n               this.userAccountsLoaded=true;\r\n          },\r\n          error => {\r\n               throwError(\"An error occurred getting the grocery items\");\r\n          });\r\n     }\r\n\r\n     selectAllNoneChanged() {\r\n          var plstSelect=document.getElementById(\"playlistsSelect\");\r\n          var options = plstSelect && plstSelect['options'];\r\n          var opt;\r\n\r\n          // Get all selected playlists\r\n          for (var i=0, iLen=options.length; i<iLen; i++) {\r\n               opt = options[i];\r\n\r\n               opt.selected=this.selectAllNone;\r\n          }\r\n     }\r\n\r\n     showSnackBarMessage(message: string) {\r\n         const config = new MatSnackBarConfig();\r\n         config.duration = 3000;\r\n         this.snackBar.open(message, 'OK', config);\r\n     }\r\n}","<mat-toolbar color=\"primary\">\r\n    <span>Jellyfin Playlist Explorer</span>\r\n</mat-toolbar>\r\n\r\n<mat-card class=\"fields\">\r\n     <mat-grid-list cols=\"4\" rowHeight=\"60px\">\r\n          <mat-grid-tile colspan=\"1\" rowspan=\"1\">\r\n               <span id=\"lblURL\" >Jellyfin URL: </span>      \r\n          </mat-grid-tile>\r\n\r\n          <mat-grid-tile colspan=\"2\" rowspan=\"1\">\r\n               <mat-form-field id=\"URLField\">\r\n                    <input matInput placeholder='' [(ngModel)]=\"URL\">\r\n               </mat-form-field>\r\n          </mat-grid-tile>\r\n\r\n          <mat-grid-tile colspan=\"1\" rowspan=\"1\">\r\n               <button id=\"btnLoadUserAccounts\" matInput mat-raised-button color=\"primary\" (click)=\"loadUserAccounts()\">Load User Accounts</button>\r\n          </mat-grid-tile>\r\n\r\n          <mat-grid-tile colspan=\"1\" rowspan=\"1\">\r\n               <span id=\"lblAPIKey\">API Key: </span>      \r\n          </mat-grid-tile>\r\n\r\n          <mat-grid-tile colspan=\"2\" rowspan=\"1\">\r\n               <mat-form-field id=\"APIKeyField\">\r\n                    <input matInput placeholder='' [(ngModel)]=\"APIKey\">\r\n               </mat-form-field>\r\n          </mat-grid-tile>\r\n\r\n          <mat-grid-tile colspan=\"1\" rowspan=\"1\"></mat-grid-tile>\r\n\r\n          <mat-grid-tile *ngIf=\"userAccountsLoaded\" colspan=\"1\" rowspan=\"1\">\r\n               <span id=\"lblUserAccounts\">User Accounts: </span>      \r\n          </mat-grid-tile>\r\n\r\n          <mat-grid-tile *ngIf=\"userAccountsLoaded\" colspan=\"2\" rowspan=\"1\">\r\n               <mat-select id=\"userAccounts\" placeholder='User Accounts' name=\"useraccount\" [(ngModel)]=\"currentUserID\" [required]=true>\r\n                    <mat-option *ngFor=\"let currAccount of userAccounts\" [value]=\"currAccount.Id\">\r\n                          {{ currAccount.Name }}\r\n                    </mat-option>\r\n                </mat-select>\r\n          </mat-grid-tile>\r\n\r\n          <mat-grid-tile colspan=\"1\" rowspan=\"1\">\r\n               <button id=\"btnLoadPlaylists\" *ngIf=\"currentUserID != ''\" matInput mat-raised-button color=\"primary\" (click)=\"loadPlaylists()\">Load Playlists</button>\r\n          </mat-grid-tile>\r\n\r\n          <mat-grid-tile *ngIf=\"playlistsLoaded\" colspan=\"4\" rowspan=\"1\">               \r\n               <mat-checkbox id=\"selectAllNone\" [(ngModel)]=\"selectAllNone\" disabled=\"false\" (change)=\"selectAllNoneChanged()\">Select All/None</mat-checkbox>\r\n          </mat-grid-tile>\r\n\r\n          <mat-grid-tile id=\"playlistsSelectGrid\" colspan=\"2\">\r\n               <select id=\"playlistsSelect\" multiple ng-model=\"xss\">\r\n                    <option *ngFor=\"let currPlaylist of playlists\" value=\"{{currPlaylist.Id}}\">\r\n                         {{ currPlaylist.Name }}\r\n                    </option>\r\n               </select>\r\n          </mat-grid-tile>\r\n\r\n          <mat-grid-tile colspan=\"1\" rowspan=\"1\">\r\n               <button id=\"btnExport\" *ngIf=\"playlistsLoaded\" matInput mat-raised-button color=\"primary\" (click)=\"exportPlaylists()\">Export</button>\r\n          </mat-grid-tile>     \r\n     </mat-grid-list>\r\n</mat-card>\r\n\r\n<br><br><br><br>\r\n<a href=\"https://github.com/SegiH/JellyfinPlaylistExporter\" target=\"_blank\">Source code on Github</a>","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { JellyfinPlaylistExporterModule } from './app/jellyfinplaylistexporter/jellyfinplaylistexporter.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(JellyfinPlaylistExporterModule)\r\n  .catch(err => console.error(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}